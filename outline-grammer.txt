extend		: [o_extend ext_expr (block)+ c_extend]
ext_expr	: [{(variable|element|filename)}]
block		: [o_block blk_expr ((markup)*|(super)?|(slot)+|(incl)*) c_block]
blk_expr	: [{(variable)}]
slot		: [o_slot slt_expr (markup)* c_slot]
slt_expr	: [{(variable)}]
o_extend	: @extend
c_extend	: [o_extend o_close]
o_block 	: @block
c_block		: [o_block o_close]
o_slot	 	: @slot
c_slot		: [o_slot o_close]
super	 	: @super{}
incl		: [o_incl inc_expr]
inc_expr	: [{(variable|element|filename)}]
o_incl		: @incl
variable	: \w+
element		: dom:\w+
filename	: file:\w+
markup		: (.*)



for		: [o_for for_expr (for|if|stmt|markup)+ o_end]
for_expr	: [{key (, index)? in iterable}]
if		: [o_if if_expr (for|if|stmt|markup)+ (elif)* (else)? o_end]
if_expr		: [{expr}]
elif		: [o_elif if_expr (for|if|stmt|markup)+]
else		: [o_else]
eval		: [o_eval eval_expr]
eval_expr	: [{expr}]
o_for		: @for
o_if		: @if
o_elif		: @elif
o_else		: [@else o_close]
o_end		: [@end o_close]
o_close		: {}
o_eval		: @eval
property	: @{expr}
iterable	: (property|expr)
index		: \w+
key		: \w+
expr		: .+
	
for_expr regex 	=> /\{.+,?.+in.+\}/
o_close regex	=> /\{\s?}/
expr regex	=> /\{.+?}/


